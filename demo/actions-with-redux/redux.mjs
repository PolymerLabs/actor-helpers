/*
The MIT License (MIT)

Copyright (c) 2015-present Dan Abramov

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */
function symbolObservablePonyfill(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}var root,result=symbolObservablePonyfill(root="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof module?module:Function("return this")());const randomString=()=>Math.random().toString(36).substring(7).split("").join("."),ActionTypes={INIT:`@@redux/INIT${randomString()}`,REPLACE:`@@redux/REPLACE${randomString()}`,PROBE_UNKNOWN_ACTION:()=>`@@redux/PROBE_UNKNOWN_ACTION${randomString()}`};function isPlainObject(e){if("object"!=typeof e||null===e)return!1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function createStore(e,t,r){if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw Error("Expected the enhancer to be a function.");return r(createStore)(e,t)}if("function"!=typeof e)throw Error("Expected the reducer to be a function.");let n=e,o=t,i=[],s=i,c=!1;function u(){s===i&&(s=i.slice())}function a(){if(c)throw Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return o}function d(e){if("function"!=typeof e)throw Error("Expected the listener to be a function.");if(c)throw Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");let t=!0;return u(),s.push(e),function(){if(!t)return;if(c)throw Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,u();const r=s.indexOf(e);s.splice(r,1)}}function f(e){if(!isPlainObject(e))throw Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw Error("Reducers may not dispatch actions.");try{c=!0,o=n(o,e)}finally{c=!1}const t=i=s;for(let e=0;t.length>e;e++){(0,t[e])()}return e}return f({type:ActionTypes.INIT}),{dispatch:f,subscribe:d,getState:a,replaceReducer:function(e){if("function"!=typeof e)throw Error("Expected the nextReducer to be a function.");n=e,f({type:ActionTypes.REPLACE})},[result]:function(){const e=d;return{subscribe(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function r(){t.next&&t.next(a())}return r(),{unsubscribe:e(r)}},[result](){return this}}}}}function getUndefinedStateErrorMessage(e,t){const r=t&&t.type;return`Given ${r&&`action "${r+""}"`||"an action"}, reducer "${e}" returned undefined. `+"To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined."}function assertReducerShape(e){Object.keys(e).forEach(t=>{const r=e[t];if(void 0===r(void 0,{type:ActionTypes.INIT}))throw Error(`Reducer "${t}" returned undefined during initialization. `+"If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:ActionTypes.PROBE_UNKNOWN_ACTION()}))throw Error(`Reducer "${t}" returned undefined when probed with a random type. `+`Don't try to handle ${ActionTypes.INIT} or other actions in "redux/*" `+"namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.")})}function combineReducers(e){const t=Object.keys(e),r={};for(let n=0;t.length>n;n++){const o=t[n];"function"==typeof e[o]&&(r[o]=e[o])}const n=Object.keys(r);let o;try{assertReducerShape(r)}catch(e){o=e}return function(e={},t){if(o)throw o;let i=!1;const s={};for(let o=0;n.length>o;o++){const c=n[o],u=e[c],a=(0,r[c])(u,t);if(void 0===a){const e=getUndefinedStateErrorMessage(c,t);throw Error(e)}s[c]=a,i=i||a!==u}return i?s:e}}function bindActionCreator(e,t){return function(){return t(e.apply(this,arguments))}}function bindActionCreators(e,t){if("function"==typeof e)return bindActionCreator(e,t);if("object"!=typeof e||null===e)throw Error(`bindActionCreators expected an object or a function, instead received ${null===e?"null":typeof e}. `+'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');const r=Object.keys(e),n={};for(let o=0;r.length>o;o++){const i=r[o],s=e[i];"function"==typeof s&&(n[i]=bindActionCreator(s,t))}return n}function compose(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce((e,t)=>(...r)=>e(t(...r)))}function applyMiddleware(...e){return t=>(...r)=>{const n=t(...r);let o=()=>{throw Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")};const i={getState:n.getState,dispatch:(...e)=>o(...e)},s=e.map(e=>e(i));return o=compose(...s)(n.dispatch),{...n,dispatch:o}}}export{createStore,combineReducers,bindActionCreators,applyMiddleware,compose,ActionTypes as __DO_NOT_USE__ActionTypes};
